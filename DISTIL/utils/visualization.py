"""
Visualization utilities for displaying results.
"""

import torch
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image

def plot_image_tensor(image_tensor):
    """
    Plot a PyTorch image tensor.
    
    Args:
        image_tensor: PyTorch tensor of shape [C, H, W] or [1, C, H, W]
    """
    # Ensure the tensor is on CPU for matplotlib compatibility
    if image_tensor.is_cuda:
        image_tensor = image_tensor.detach().cpu()
        
    # Remove the batch dimension (1, 3, 224, 224) -> (3, 224, 224)
    image_tensor = image_tensor.squeeze(0)
    
    # Rearrange from (3, 224, 224) to (224, 224, 3) for plotting
    image_tensor = image_tensor.permute(1, 2, 0)
    
    # Convert the tensor to a NumPy array
    image_np = image_tensor.numpy()

    image_np = image_np.clip(0, 1)
    
    # Plot the image
    plt.imshow(image_np)
    plt.axis('off')  # Hide axis ticks and labels
    plt.show()

def show_diffusion_images(batch, scale_factor=3):
    """
    Display a batch of images generated by a diffusion model with an enlarged size.
    
    Args:
        batch: PyTorch tensor of images
        scale_factor: Factor to scale the images by for display
    """
    scaled = ((batch + 0.01) * 127.5).round().clamp(0, 255).to(torch.uint8).cpu()
    reshaped = scaled.permute(2, 0, 3, 1).reshape([batch.shape[2], -1, 3])
    img = Image.fromarray(reshaped.numpy())
    new_size = tuple(dim * scale_factor for dim in img.size)
    enlarged_img = img.resize(new_size, resample=Image.BICUBIC)
    plt.imshow(enlarged_img)
    plt.axis('off')
    plt.show()

def plot_images_grid(images, labels=None, cols=4, figsize=(15, 15)):
    """
    Display a grid of images with optional labels.
    
    Args:
        images: List or tensor of images
        labels: Optional list of labels for each image
        cols: Number of columns in the grid
        figsize: Figure size as (width, height)
    """
    # Convert tensor to list if needed
    if isinstance(images, torch.Tensor):
        if images.dim() == 4:  # Batch of images
            images = [img for img in images]
        else:  # Single image
            images = [images]
    
    # Calculate rows needed
    rows = (len(images) + cols - 1) // cols
    
    fig, axes = plt.subplots(rows, cols, figsize=figsize)
    axes = axes.flatten()
    
    for i, ax in enumerate(axes):
        if i < len(images):
            img = images[i]
            
            # Convert tensor to numpy if needed
            if isinstance(img, torch.Tensor):
                img = img.detach().cpu()
                if img.dim() == 3:  # C,H,W
                    img = img.permute(1, 2, 0).numpy()
                else:
                    img = img.numpy()
            
            # Ensure values are between 0 and 1 for imshow
            img = np.clip(img, 0, 1)
            
            ax.imshow(img)
            if labels is not None and i < len(labels):
                ax.set_title(labels[i])
            ax.axis('off')
        else:
            ax.axis('off')
    
    plt.tight_layout()
    plt.show() 